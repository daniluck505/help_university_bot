#!/usr/bin/python3
from aiogram.utils import executor
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from middlewares import rate_limit
from memory_profiler import memory_usage
import numpy as np
from functions import *
from loader import *


# ---------------------------------------------------- handlers ----------------------------------------------------
@dp.message_handler(content_types=['sticker'])
async def get_sticker_id(message: types.Message):
    if message.from_user.id in config.admins_list:
        await message.answer(message.sticker.file_id)


@dp.message_handler(commands=['get_mess_id'])
async def get_mess_id(message: types.Message):
    if message.from_user.id in config.admins_list:
        await message.answer(message.message_id)


@dp.message_handler(commands=['make_dot'])
async def return_message_id(message: types.Message):
    if message.from_user.id == config.admin_id:
        res = await bot.send_message(config.profile_id, '.')
        await bot.send_message(config.admin_id, res)


@dp.message_handler(commands=['make_rating'])
async def make_rating(message: types.Message):
    if message.from_user.id in config.admins_list:
        await make_rating_func()


@rate_limit(limit=3)
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    if message.chat.type == 'private':
        if not DB.user_exists(message.from_user.id):
            try:
                await bot.send_sticker(message.from_user.id,
                                       sticker='CAACAgIAAxkBAAIC2GKAGAP-qBGC5YInxh5PRu_8qJ_AAAKkHgAC1NEAAUgEnMSQXPUUySQE')
            except:
                pass

            mess = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, {message.from_user.first_name} ! –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–ºüëã –≤–∞—Å –≤ –±–æ—Ç–µ, " \
                   f"—Å–æ–∑–¥–∞–Ω–Ω–æ–º –¥–ª—è –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ(–±—ã—Å—Ç—Ä–æ–≥–æ) –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∫–∞–∫–æ–≥–æ-–ª–∏–±–æ –≤—É–∑–æ–≤—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è. " \
                   f"–ë—É–¥—å —Ç–æ —á–µ—Ä—Ç—ë–∂ –ø–æ –Ω–∞—á–µ—Ä—Ç–∞–ª–∫–µ‚úèÔ∏è, –∏–ª–∏ –∂–µ —Ä–∞—Å—á—ë—Ç–∫–∞ –ø–æ —Å–æ–ø—Ä–æ–º–∞—Ç—É, —Ç—ã —Ç–æ—á–Ω–æ –Ω–∞–π–¥—ë—à—å –Ω—É–∂–Ω–æ–≥–æ —Ç–µ–±–µ —á–µ–ª–æ–≤–µ–∫–∞ü§ù." \
                   f"\n\n–ú—ã - —Ç–µ, –∫—Ç–æ –Ω–µ –ø–µ—Ä–≤—ã–π –≥–æ–¥ –ø–æ–º–æ–≥–∞–µ–º —Ä–µ–±—è—Ç–∞–º —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º –ø—Ä–æ–±–ª–µ–º–∞–º–∏." \
                   f" –ò –¥–∞–±—ã –æ–±–ª–µ–≥—á–∏—Ç—å –≤–∞–º –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è üîé –ø–æ–º–æ—â–Ω–∏–∫–∞, –º—ã —Å–æ–∑–¥–∞–ª–∏ —ç—Ç–æ–≥–æ –±–æ—Ç–∞." \
                   f"\n\n–°–æ–≤–µ—Ç—É—é –Ω–∞–∂–∞—Ç—å /help ,—á—Ç–æ–±—ã —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ."
            await bot.send_message(message.chat.id, mess)
            mess = 'P.S. <b>—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–æ—Ç–∞ –Ω–µ –Ω–µ—Å—É—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –≤–∑–∞–∏–º–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è –º–µ–∂–¥—É —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏</b>'
            await bot.send_message(message.chat.id, mess)
            DB.new_row_user_db(user_id=message.from_user.id, name=message.from_user.first_name)
            DB.all_users_list = DB.all_list()

            start_command = message.text
            refer_id = str(start_command[7:])
            if str(refer_id) != '':
                if str(refer_id) != str(message.from_user.id):
                    DB.update_in_user(user_id=message.from_user.id, dict_values={'refer_id': int(refer_id)})
                    try:
                        await bot.send_message(refer_id, '–ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!')
                    except:
                        pass
                else:
                    await message.answer('–ù–µ–ª—å–∑—è —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ —Å–≤–æ–µ–π —Å—Å—ã–ª–∫–µ!')


@rate_limit(limit=3)
@dp.message_handler(commands=['my_profile'])
async def my_profile(message: types.Message):
    if message.chat.type == 'private':
        user_id = message.from_user.id
        if user_id in DB.ban_users_list:
            await message.answer('–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã!')
            return
        count_refer = DB.get_count_referals(user_id=user_id)
        refer_info = f'–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n' \
                     f'https://t.me/{config.BOT_NICKNAME}?start={message.from_user.id}\n' \
                     f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {count_refer}\n'
        if DB.decider_exists(user_id):
            profile_id = DB.get_profile_id(user_id)
            await bot.forward_message(chat_id=user_id,
                                      from_chat_id=config.profile_id,
                                      message_id=profile_id)
            text = '\n–ù–∞–∂–º–∏—Ç–µ:\n' \
                   '\n<b>–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å</b> - –µ—Å–ª–∏ –í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –í–£–ó–∞, ' \
                   '–¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –∫–∞–∫–æ–π-–ª–∏–±–æ –ø—Ä–µ–¥–º–µ—Çüìñ \n\n' \
                   '<b>–ó–∞–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å</b> - –µ—Å–ª–∏ –í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –±—ã—Ç—å –†–µ—à–∞–ª–æ–π –∫–∞–∫ –Ω–∞ –∫–∞–∫–æ–µ-—Ç–æ –≤—Ä–µ–º—è,' \
                   ' —Ç–∞–∫ –∏ –Ω–∞–≤—Å–µ–≥–¥–∞. –í—ã –±–æ–ª—å—à–µ –Ω–µ —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∑–∞–∫–∞–∑—ã, ' \
                   '–ø–æ–∫–∞ —Å–Ω–æ–≤–∞ –Ω–µ –∑–∞—Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä—è–¥—ã –†–µ—à–∞–ª –∏ –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—åüí™üèª ' \
                   '\n–í—Å–µ –≤–∞—à–∏ –æ—Ç–∑—ã–≤—ã –∏ –æ—Ü–µ–Ω–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è.'
            await bot.send_message(user_id, text, reply_markup=Markup.key_profile_manage, parse_mode='HTML')
            await bot.send_message(user_id, refer_info)
        elif DB.dunno_exists(user_id):
            mess = '–ü–æ–∫–∞ —É –≤–∞—Å –æ–±—ã—á–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–∫–∞–∑—á–∏–∫–∞.\n' \
                   '–•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è?'
            await bot.send_message(message.from_user.id, mess, reply_markup=Markup.choice_1)
            await bot.send_message(user_id, refer_info)
        else:
            await bot.send_message(message.from_user.id,
                                   '–•–º... –∫–∞–∂–µ—Ç—Å—è –≤—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –Ω–∞—á–∞–ª—å–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ /start')


@dp.callback_query_handler(text_contains='profile_manage')
async def profile_manage(call: types.CallbackQuery):
    data_call = call.data.split(':')[-1]
    if data_call == 'make':
        await bot.send_message(call.from_user.id, "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç(—Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ)")
        await regist_decider.waiting_regist_univer.set()
    elif data_call == 'del':
        user_id = call.from_user.id
        profile_id = DB.get_profile_id(user_id)
        await bot.edit_message_text('–ü—Ä–æ—Ñ–∏–ª—å –∑–∞–∫—Ä—ã—Ç', chat_id=config.profile_id, message_id=profile_id)
        DB.delete_user(user_id, sub=True)
        dict_values = {'decider': False,
                       'subject_count': 0}
        DB.update_in_user(user_id, dict_values)
        await call.message.edit_text('–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —Ä–µ—à–∞–ª—ã –∑–∞–∫—Ä—ã—Ç. –ù–æ –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ —Å—Ç–∞—Ç—å —Ä–µ—à–∞–ª–æ–π, '
                                     '–¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /my_profile. \n'
                                     '–ï—Å–ª–∏ –≤–∞—Å –Ω–µ —É—Å—Ç—Ä–æ–∏–ª —Å–µ—Ä–≤–∏—Å, —Ç–æ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –æ–± —ç—Ç–æ–º –∞–¥–º–∏–Ω–∞–º —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É '
                                     '/help_me',
                                     reply_markup=None)


@dp.callback_query_handler(text_contains='profile_make', state="*")
async def new_profile_make(call: types.CallbackQuery):
    # await bot.delete_message(call.from_user.id, call.message.message_id)
    data_call = call.data.split(':')[-1]
    if data_call == 'info':
        mess = ' –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å - –ø—Ä–æ—â–µ –≥–æ–≤–æ—Ä—è –†–µ—à–∞–ª–∞üí™üèª\n' \
               'üìå–ß–µ—Ä–µ–∑ –±–æ—Ç–∞ –∑–∞–∫–∞–∑—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ—Å—Ç—É–ø–∞–µ—Ç –í–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤ —á–∞—Ç üì®. ' \
               '–°–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç —Ç–æ–ª—å–∫–æ –ø–æ —Ç–µ–º –ø—Ä–µ–¥–º–µ—Ç–∞–º, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–º–µ—á–µ–Ω—ã –≤ –í–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ. ' \
               '–î–∞–ª–µ–µ –í—ã —É–∂–µ —Ä–µ—à–∞–µ—Ç–µ - —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å –∏–ª–∏ –æ—Ç–∫–∞–∑—ã–≤–∞–µ—Ç–µ—Å—å –æ—Ç —Ä–∞–±–æ—Ç—ã üõ†\n\n' \
               '–ï—Å–ª–∏ –∑–∞–∫–∞–∑—á–∏–∫ –≤—ã–±—Ä–∞–ª –í–∞—Å –∫–∞–∫ –†–µ—à–∞–ª—É, ' \
               '—Ç–æ –æ–Ω –Ω–∞–ø–∏—à–µ—Ç –í–∞–º –≤ –ª–∏—á–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –∏ –∑–∞–¥–∞—Å—Ç –≤–æ–ø—Ä–æ—Å—ã, –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –µ–≥–æüßê\n\n' \
               '–•–æ—Ç–∏—Ç–µ —Å—Ç–∞—Ç—å –†–µ—à–∞–ª–æ–π?üí™üèª'
        await call.message.edit_text(mess, reply_markup=Markup.choice_2)
    elif data_call == 'yes':
        await call.message.edit_text('–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è', reply_markup=None)
        await call.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç(—Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ)")
        await regist_decider.waiting_regist_univer.set()
    elif data_call == 'no':
        await call.message.edit_text('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=None)


@rate_limit(limit=3)
@dp.message_handler(commands=['help'])
async def help(message: types.Message):
    # –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ—Ñ–∏–ª—è –≤—ã–¥–∞–≤–∞—Ç—å —Ä–∞–∑–Ω—É—é –∏–Ω—Ñ—É
    if message.from_user.id in DB.ban_users_list:
        await message.answer('https://www.youtube.com/watch?v=2Q_ZzBGPdqE')
        return
    mess = 'üìå–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –Ω–∞–∂–∞–ª–∏. –ü–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ 67% –ª—é–¥–µ–π –Ω–µ —á–∏—Ç–∞—é—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é, –Ω–æ –Ω–µ –±—É–¥–µ–º –æ –≥—Ä—É—Å—Ç–Ω–æ–º. \n\n' \
           '–ù–∏–∂–µ –ø—Ä–∏–≤–µ–¥–µ–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞:\n\n' \
           '/send - –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±–æ—Ç–∞ –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –†–µ—à–∞–ª—ã –ø–æ –∫–∞–∫–æ–º—É-–ª–∏–±–æ –ø—Ä–µ–¥–º–µ—Ç—É ü§ù\n\n' \
           '/my_profile - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—à —Å—Ç–∞—Ç—É—Å –∏ –¥–∞—ë—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç—å –†–µ—à–∞–ª–æ–πüí™\n\n' \
           '/info -  –≤ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞ –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–∏—Å–∫—É –†–µ—à–∞–ª—ãüîé\n\n' \
           '/help_me - –µ—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –∑–∞–º–µ—Ç–∏–ª–∏ –æ—à–∏–±–∫—É –∏–ª–∏ –∂–µ –ø—Ä–æ—Å—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏—è ' \
           '–ø–æ —É–ª—É—á—à–µ–Ω–∏—é –±–æ—Ç–∞ü§ñ\n' \
           '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –ø—Ä–æ—á–∏—Ç–∞—é—Ç –µ–≥–æ –∏ –æ—Ç–≤–µ—Ç—è—Ç, –∫–æ–≥–¥–∞ –ø–æ—è–≤–∏—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å‚ù§Ô∏è' \
           '–ê –µ—â–µ —É –Ω–∞—Å –µ—Å—Ç—å —Å–≤–æ–∏ —Å—Ç–∏–∫–µ—Ä—ã https://t.me/addstickers/reshals'

    await bot.send_message(message.chat.id, mess, parse_mode='html')
    mess = f'''–î–ª—è –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º: \n—Ç—ã–∫–Ω–∏—Ç–µ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è \n`{config.card_num}`'''
    await bot.send_message(message.chat.id, mess, parse_mode='markdown')


@rate_limit(limit=3)
@dp.message_handler(commands=['info'])
async def info(message: types.Message):
    if message.from_user.id in DB.ban_users_list:
        await message.answer('https://www.youtube.com/watch?v=2Q_ZzBGPdqE')
        return
    mess = '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º:\n\n' \
           '–î–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –†–µ—à–∞–ª—ã –ø–æ –í–∞—à–µ–º—É –ø—Ä–µ–¥–º–µ—Ç—É, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –±–æ—Ç—É:\n\n' \
           '1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ú–µ–Ω—é –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /send\n' \
           '2. –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—åü§ù\n' \
           '3. –ü–æ–¥—Ä–æ–±–Ω–æ —Ä–∞—Å–ø–∏—à–∏—Ç–µ –±–æ—Ç—É –∑–∞–¥–∞–Ω–∏–µ, –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–µ –í–∞—Å, ' \
           '–∏ –æ–ø—Ä–∞–≤—å—Ç–µ. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ —Ñ–∞–π–ª —Å –∑–∞–¥–∞–Ω–∏–µ–º‚úâÔ∏è\n' \
           '4. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –Ω–∞ –í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—Å—è ‚è∞ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –†–µ—à–∞–ª, ' \
           '–í–∞–º –ø—Ä–∏–¥–µ—Ç –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å —Å –∏—Ö —Å—Å—ã–ª–∫–∞–º–∏, –ø—Ä–æ—Ñ–∏–ª—è–º–∏ –∏, –≤–æ–∑–º–æ–∂–Ω–æ, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º –ø–æ –∑–∞–¥–∞–Ω–∏—é.\n' \
           '5. –ö–æ–≥–¥–∞ –≤—ã –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏—Å—å —Å –†–µ—à–∞–ª–æ–π, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –í—ã–±—Ä–∞—Ç—å –†–µ—à–∞–ª—ÉüöÄ\n' \
           '6. –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –†–µ—à–∞–ª—ãüôãüèº –∏, ' \
           '–Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ, —É–∑–Ω–∞—Ç—å –≤—Å–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –í–∞—Å –≤–æ–ø—Ä–æ—Å—ã –Ω–∞–ø—Ä—è–º—É—é.'
    if DB.decider_exists(message.from_user.id):
        mess += '\n\n\n–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è —Ä–µ—à–∞–ª:\n\n' \
                '–ö–æ–≥–¥–∞ –∫ –≤–∞–º –ø—Ä–∏—Ö–æ–¥–∏—Ç –∑–∞–∫–∞–∑:\n' \
                '- –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è, —á—Ç–æ–±—ã –í–∞—à—É –∑–∞—è–≤–∫—É –º–æ–≥–ª–∏ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å. \n' \
                '<em>–ü—Ä–∏ –æ—Ç–∫–ª–∏–∫–µ, –í—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ –ø–æ–≤–æ–¥—É –∑–∞–∫–∞–∑–∞.</em>\n' \
                '- –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è, –µ—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏ –Ω–µ–ø–æ–¥–æ–±–∞—é—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç.\n' \
                '<em>–ñ–∞–ª–æ–±–∞ –ø—Ä–∏–¥–µ—Ç –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –∏ –æ–Ω–∏ –µ—ë —Ä–∞—Å—Å–º–æ—Ç—Ä—è—Ç</em>\n\n' \
                '–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –í–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è, –∫ –≤–∞–º –º–æ–≥—É—Ç –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ª–∏—á–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏'
        await bot.send_message(message.chat.id, mess, parse_mode='html')
        return
    mess += '\n\n–¢–∞–∫ –∂–µ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–∞–º–æ–º—É —Å—Ç–∞—Ç—å –†–µ—à–∞–ª–æ–π, ' \
            '–¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ /my_profile –∏ —Å–ª–µ–¥—É–π—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–∏–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º'
    await bot.send_message(message.chat.id, mess, parse_mode='html')


@dp.message_handler(commands=['helpa'])
async def helpa(message: types.Message):
    if await main_admin_test(message):
        await keyboard_admin(message)
    if await admins_test(message):
        mess = '–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–æ–≤:\n' \
               '- –û—Ç–≤–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ id \n' \
               '/answer_user [id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è] —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è \n' \
               '- –ë–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n' \
               '/ban_user [id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è] \n' \
               '- –†–∞—Å—Å—ã–ª–∫–∞ \n' \
               '/public \n' \
               '- –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è \n' \
               '/delete_user id_user  \n' \
               '- –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ \n' \
               '/statistics'
        await message.answer(mess)


class send_help_me_state(StatesGroup):
    send_help = State()


@rate_limit(limit=3)
@dp.message_handler(commands=['help_me'])
async def help_me(message: types.Message):
    if message.from_user.id in DB.ban_users_list:
        await message.answer('–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã!')
        return
    keyb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ['–û—Ç–º–µ–Ω–∞']
    keyb.add(*buttons)
    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–µ. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É, –Ω–∞–ø–∏—à–∏—Ç–µ "–û—Ç–º–µ–Ω–∞"',
                         reply_markup=keyb)
    await send_help_me_state.send_help.set()


@dp.message_handler(state=send_help_me_state.send_help, content_types=['text'])
async def send_help_me(message: types.Message, state: FSMContext):
    if message.text.lower() == '–æ—Ç–º–µ–Ω–∞':
        await bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞', reply_markup=types.ReplyKeyboardRemove())
    else:
        print(1)
        key = await Markup.ban_user(message.from_user.id)
        print(2)
        print(3)
        await bot.send_message(config.SUPPORT_ID,
                               text=f'@{message.from_user.username} {message.from_user.id}',
                               parse_mode='html',
                               reply_markup=key)
        print(4)
        await bot.forward_message(chat_id=config.SUPPORT_ID,
                                  from_chat_id=message.from_user.id,
                                  message_id=message.message_id)
        print(5)
        await message.answer('–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∞–º,'
                             '–≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è —Ä–µ—à–∏—Ç—å –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É',
                             reply_markup=types.ReplyKeyboardRemove())

    await state.finish()


class send_task(StatesGroup):
    choice_sub = State()
    give_task = State()


@logger.catch()
@rate_limit(limit=config.limit_send)
@dp.message_handler(commands=['send'])
async def send(message: types.Message):
    if message.from_user.id in DB.ban_users_list:
        await message.answer('–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã!')
        return
    elif not DB.user_exists(message.from_user.id):
        await bot.send_message(message.from_user.id,
                               '–•–º... –∫–∞–∂–µ—Ç—Å—è –≤—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –Ω–∞—á–∞–ª—å–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ /start')
    elif message.chat.type == 'private':
        key = await Markup.subjects_task_with_see(config.all_subjects[1:])
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç', reply_markup=key)
        await send_task.choice_sub.set()
    else:
        await message.answer('–ü–∏—Å–∞—Ç—å –±–æ—Ç—É –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–∫—É')


@dp.callback_query_handler(text_contains='all_subjects_task', state=send_task.choice_sub)
async def keyboard_subjects_task(call: types.CallbackQuery, state: FSMContext):
    data_call = call.data.split(':')[-1]
    if data_call == 'see':
        keyboard_hide = await Markup.subjects_task_with_hide(config.all_subjects[1:])
        mess = config.info_subs_mess
        await call.message.edit_text(mess, reply_markup=keyboard_hide)
    elif data_call == 'hide':
        keyboard_see = await Markup.subjects_task_with_see(config.all_subjects[1:])
        mess = '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç'
        await call.message.edit_text(mess, reply_markup=keyboard_see)
    else:
        await state.update_data(sub=data_call)
        await call.message.edit_text(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {data_call}', reply_markup=None)
        await bot.send_message(call.from_user.id, '–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ <b>–æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º</b>. \n'
                                                  '–ö —Å–æ–æ–±—â–µ–Ω–∏—é –º–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –¥–æ–∫—É–º–µ–Ω—Ç, '
                                                  '–∏–ª–∏ –æ–±–æ–π—Ç–∏—Å—å –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç–æ–º —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∑–∞–¥–∞–Ω–∏—è.')
        await send_task.next()


@dp.message_handler(state=send_task.give_task, content_types=['text', 'photo', 'document'])
async def give_task(message: types.Message, state: FSMContext):
    await state.update_data(task_message=message)
    await message.reply('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞–¥–∞–Ω–∏—è', reply_markup=Markup.confirm_task)


@logger.catch()
@dp.callback_query_handler(text_contains='confirm_task_from_user', state=send_task.give_task)
async def keyboard_subjects_task(call: types.CallbackQuery, state: FSMContext):
    data_call = call.data.split(':')[-1]
    user_id = call.from_user.id
    task_data = await state.get_data()
    if data_call == 'yes':
        send_list_id = DB.get_list_desiders(task_data['sub'])
        if len(send_list_id) == 0:
            mess = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –Ω–∞—à–ª–æ—Å—å —Ä–µ—à–∞–ª—ã –ø–æ —ç—Ç–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É. '
            await call.message.edit_text(mess, reply_markup=None)
        else:
            DB.activity_users_dict['send'] += 1
            mess = f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—à–∞–ª –ø–æ –≤–∞—à–µ–º—É –ø—Ä–µ–¥–º–µ—Ç—É: {len(send_list_id)} \n' \
                   f'–ö–∞–∫ —Ç–æ–ª—å–∫–æ –∫—Ç–æ-—Ç–æ –æ—Ç–∫–ª–∏–Ω–µ—Ç—Å—è –Ω–∞ –≤–∞—à—É –∑–∞–¥–∞—á—É, —è —Å—Ä–∞–∑—É –∂–µ –≤–∞–º —Å–æ–æ–±—â—É. ' \
                   f'–ù–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–∑—ã–≤–æ–≤ –≤ –∫–∞–Ω–∞–ª–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥–ª—è —Å–µ–±—è –ª—É—á—à–µ–≥–æ —Ä–µ—à–∞–ª—É. \n' \
                   f'–ö–æ–≥–¥–∞ –≤—ã –¥–æ–≥–æ–≤–æ—Ä–∏—Ç–µ—Å—å —Å –æ–¥–Ω–∏–º –∏–∑ —Ä–µ—à–∞–ª, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–í—ã–±—Ä–∞—Ç—å —Ä–µ—à–∞–ª—É", ' \
                   f'—á—Ç–æ–±—ã —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –≤–∞—à–µ–º—É –∑–∞–¥–∞–Ω–∏—é –±–æ–ª—å—à–µ –Ω–µ –ø—Ä–∏—Ö–æ–¥–∏–ª–æ'
            await call.message.edit_text(mess, reply_markup=None)
            for i in send_list_id:
                if i not in DB.ban_users_list:
                    try:
                        key = await Markup.deciders_answer(id_dunno=task_data['task_message'].from_user.id,
                                                           message_id=task_data['task_message'].message_id)
                        await bot.send_message(chat_id=i, text=f'–ó–∞–¥–∞–Ω–∏–µ –ø–æ #{task_data["sub"]}')
                        await task_data['task_message'].send_copy(chat_id=i, reply_markup=key)
                        await asyncio.sleep(0.1)
                    except:
                        pass
            if user_id in DB.to_do:
                DB.to_do[user_id].append(task_data['task_message'].message_id)
            else:
                DB.to_do[user_id] = [task_data['task_message'].message_id]

        await state.finish()
    elif data_call == 'no':
        await call.message.edit_text('–ü—Ä–∏—à–ª–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º', reply_markup=None)
        return
    elif data_call == 'stop':
        await call.message.edit_text('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞–¥–Ω–∏—è', reply_markup=None)
        await state.finish()


@dp.callback_query_handler(text_contains='dunno_answer_data')
async def dunno_answer(call: types.CallbackQuery):
    data_call = call.data.split(':')
    task_message = int(data_call[3])
    id_dunno = int(data_call[2])
    action = data_call[1]
    if action == 'yes':
        await call.message.edit_reply_markup(reply_markup=None)
        await call.message.answer('–ü–æ —ç—Ç–æ–º—É –∑–∞–¥–∞–Ω–∏—é –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ –ø–æ—Ç—Ä–µ–≤–æ–∂–∞—Ç')
        DB.activity_users_dict['close'] += 1
        if task_message in DB.to_do[id_dunno]:
            DB.to_do[id_dunno].remove(task_message)
    pass


class deciders_answer_states(StatesGroup):
    send_comment = State()


@dp.callback_query_handler(text_contains='deciders_answer_data')
async def deciders_answer(call: types.CallbackQuery, state: FSMContext):
    data_call = call.data.split(':')
    task_message = int(data_call[3])
    id_dunno = int(data_call[2])
    action = data_call[1]
    await state.update_data(task_message=task_message)
    await state.update_data(id_dunno=id_dunno)
    if action == 'yes':
        if bool(DB.to_do.get(id_dunno)):
            if task_message in DB.to_do.get(id_dunno):
                await call.message.edit_reply_markup(None)
                keyb = types.ReplyKeyboardMarkup(resize_keyboard=True)
                buttons = ['–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å']
                keyb.add(*buttons)
                await call.message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –æ—Ç–∫–ª–∏–∫—É.\n'
                                          '–ï—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –ø–∏—Å–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"',
                                          reply_markup=keyb)
                await deciders_answer_states.send_comment.set()
            else:
                await call.message.edit_text('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –ø–æ —ç—Ç–æ–º—É –∑–∞–¥–∞–Ω–∏—é —É–∂–µ –Ω–∞—à–µ–ª—Å—è —Ä–µ—à–∞–ª–∞', reply_markup=None)
        else:
            await call.message.edit_text('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –ø–æ —ç—Ç–æ–º—É –∑–∞–¥–∞–Ω–∏—é —É–∂–µ –Ω–∞—à–µ–ª—Å—è —Ä–µ—à–∞–ª–∞', reply_markup=None)

    elif action == 'prob':
        res = await call.message.edit_reply_markup(reply_markup=None)
        key = await Markup.ban_user(id_dunno)
        await bot.send_message(config.SUPPORT_ID, f'#–ñ–∞–ª–æ–±–∞ –Ω–∞ `{id_dunno}`', parse_mode='markdown', reply_markup=key)
        await bot.forward_message(chat_id=config.SUPPORT_ID,
                                  from_chat_id=call.from_user.id,
                                  message_id=res.message_id)
        await call.message.edit_text('–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∂–∞–ª–æ–±–æ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∞–º.')


@dp.message_handler(state=deciders_answer_states.send_comment, content_types=['text'])
async def send_comment_decider(message: types.Message, state: FSMContext):
    keyb = types.ReplyKeyboardRemove()
    if message.text.lower() == '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        await message.answer('–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', reply_markup=keyb)
        mess = f'@{message.from_user.username} –æ—Ç–∫–ª–∏–∫–Ω—É–ª—Å—è'
    else:
        await message.answer('–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏ –ø—Ä–æ—Ñ–∏–ª—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', reply_markup=keyb)
        mess = f'@{message.from_user.username} –æ—Ç–∫–ª–∏–∫–Ω—É–ª—Å—è: \n' \
               f'{message.text}'
    user_data = await state.get_data()

    task_message = user_data.get('task_message')
    id_dunno = user_data.get('id_dunno')
    profile_id = DB.get_profile_id(message.from_user.id)
    await bot.forward_message(chat_id=id_dunno,
                              from_chat_id=config.profile_id,
                              message_id=int(profile_id))
    key = await Markup.dunno_answer(id_dunno=id_dunno, message_id=task_message)
    await bot.send_message(id_dunno,
                           mess,
                           reply_markup=key,
                           reply_to_message_id=task_message)
    await state.finish()


@dp.callback_query_handler(text_contains='dunno_clear_data')
async def dunno_clear_data(call: types.CallbackQuery):
    data_call = call.data.split(':')
    task_message = int(data_call[3])
    id_dunno = int(data_call[2])
    action = data_call[1]
    DB.to_do[id_dunno].remove(task_message)
    if action == 'yes':
        DB.activity_users_dict['close'] += 1
    elif action == 'think':
        DB.activity_users_dict['cancel'] += 1
    elif action == 'no':
        DB.activity_users_dict['no close'] += 1
    await call.message.edit_text('–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç', reply_markup=None)


@dp.callback_query_handler(text_contains='ban_user_data')
async def make_ban_handler(call: types.CallbackQuery):
    data_call = call.data.split(':')
    id_dunno = int(data_call[2])
    action = data_call[1]
    key_ban = await Markup.ban_user(id_dunno)
    if action == 'ban':
        if id_dunno not in DB.ban_users_list:
            DB.ban(id_dunno, yes=True)
            key = await Markup.no_ban_user(id_dunno)
            await call.message.edit_text(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {id_dunno} –∑–∞–±–∞–Ω–µ–Ω', reply_markup=key)
        else:
            await call.message.edit_text(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {id_dunno} –∑–∞–±–∞–Ω–µ–Ω ', reply_markup=None)
    elif action == 'noban':
        DB.ban(id_dunno, no=True)
        await call.message.edit_text(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {id_dunno} —Ä–∞–∑–±–∞–Ω–µ–Ω', reply_markup=key_ban)
    elif action == 'ban_30':
        if id_dunno not in DB.ban_users_list:
            await call.message.edit_text(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {id_dunno} –∑–∞–±–∞–Ω–µ–Ω –Ω–∞ 30 –º–∏–Ω—É—Ç', reply_markup=None)
            await bot.send_message(id_dunno, '–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –Ω–∞ 30 –º–∏–Ω—É—Ç')
            await ban_time(1800, id_dunno)
            await call.message.edit_text(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {id_dunno} —Ä–∞–∑–±–∞–Ω–µ–Ω', reply_markup=key_ban)
        else:
            await call.message.edit_text(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {id_dunno} –∑–∞–±–∞–Ω–µ–Ω ', reply_markup=None)
    elif action == 'ban_1':
        if id_dunno not in DB.ban_users_list:
            await call.message.edit_text(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {id_dunno} –∑–∞–±–∞–Ω–µ–Ω –Ω–∞ 1 —á–∞—Å', reply_markup=None)
            await bot.send_message(id_dunno, '–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –Ω–∞ 1 —á–∞—Å ')
            await ban_time(3600, id_dunno)
            await call.message.edit_text(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {id_dunno} —Ä–∞–∑–±–∞–Ω–µ–Ω', reply_markup=key_ban)
        else:
            await call.message.edit_text(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {id_dunno} –∑–∞–±–∞–Ω–µ–Ω ', reply_markup=None)
    elif action == 'ban_1_day':
        if id_dunno not in DB.ban_users_list:
            await call.message.edit_text(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {id_dunno} –∑–∞–±–∞–Ω–µ–Ω –Ω–∞ 1 –¥–µ–Ω—å', reply_markup=None)
            await bot.send_message(id_dunno, '–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –Ω–∞ 1 –¥–µ–Ω—å ')
            await ban_time(36000, id_dunno)
            await ban_time(36000, id_dunno)
            await call.message.edit_text(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {id_dunno} —Ä–∞–∑–±–∞–Ω–µ–Ω', reply_markup=key_ban)
        else:
            await call.message.edit_text(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {id_dunno} –∑–∞–±–∞–Ω–µ–Ω ', reply_markup=None)
    elif action == 'ban_1_week':
        if id_dunno not in DB.ban_users_list:
            await call.message.edit_text(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {id_dunno} –∑–∞–±–∞–Ω–µ–Ω –Ω–∞ –Ω–µ–¥–µ–ª—é', reply_markup=None)
            await bot.send_message(id_dunno, '–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –Ω–∞ –Ω–µ–¥–µ–ª—é ')
            for i in range(13):
                await ban_time(36000, id_dunno)
            await call.message.edit_text(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {id_dunno} —Ä–∞–∑–±–∞–Ω–µ–Ω', reply_markup=key_ban)
        else:
            await call.message.edit_text(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {id_dunno} –∑–∞–±–∞–Ω–µ–Ω ', reply_markup=None)


@dp.message_handler(content_types=['poll'])
async def regist_univer(message: types.Message):
    if message.chat.id == -1001785673732:
        if message.from_user.id == 136817688:
            for i in DB.all_list():
                try:
                    await message.forward(chat_id=i)
                    await asyncio.sleep(0.1)
                except:
                    pass
            await message.answer('–°–æ–æ–±—â–µ–Ω–∏—è —Ä–∞–∑–æ—Å–ª–∞–Ω—ã')
        else:
            await message.answer('–í—ã –Ω–µ –±–æ–≥, —è —Ç—É—Ç –±–æ—Ç')


# ------------------- regist -------------------
class regist_decider(StatesGroup):
    waiting_regist_univer = State()
    waiting_regist_username = State()
    waiting_regist_subjects = State()
    waiting_end_regist = State()


@dp.message_handler(state=regist_decider.waiting_regist_univer, content_types=types.ContentTypes.TEXT)
async def regist_univer(message: types.Message, state: FSMContext):
    if len(message.text) > 15:
        await message.answer('–¢–µ–∫—Å—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 15 —Å–∏–º–≤–æ–ª–æ–≤')
        return
    for i in ['!', '/', '@', '.', ',', '#', '$', '%', '*', '‚Ññ']:
        if i in message.text:
            await message.answer('–¢–µ–∫—Å—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤')
            return
    await state.update_data(univer=message.text)
    if message.from_user.username is None:
        key_regist = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        buttons = ['–°–¥–µ–ª–∞–ª']
        key_regist.add(*buttons)
        await message.answer("–ö–∞–∂–µ—Ç—Å—è —É –≤–∞—Å –Ω–µ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ telegram. "
                             "–ó–∞–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –∏ –≤–Ω–µ—Å–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, "
                             "–ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é."
                             "\n\n–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω—É–∂–Ω–æ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–≤—è–∑–∏ —Å –≤–∞–º–∏, "
                             "–µ—Å–ª–∏ –∫ –≤–∞–º –æ–±—Ä–∞—Ç—è—Ç—Å—è –∑–∞ –ø–æ–º–æ—â—å—é –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É.",
                             reply_markup=key_regist)
    else:
        key_regist = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        buttons = ['–î–ê', '–ù–ï–¢']
        key_regist.add(*buttons)
        await message.answer(f'–í–∞—à–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{message.from_user.username},'
                             f'–ï—Å–ª–∏ –≤—ã —Å–æ–≥–ª–∞—Å–Ω—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å –Ω–∏–º, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–î–ê". '
                             f'–ï—Å–ª–∏ –∂–µ–ª–∞–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å, –Ω–∞–∂–º–∏—Ç–µ "–ù–ï–¢".',
                             reply_markup=key_regist)
    await regist_decider.next()


@dp.message_handler(state=regist_decider.waiting_regist_username, content_types=types.ContentTypes.TEXT)
async def regist_username(message: types.Message, state: FSMContext):
    key_regist = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    buttons = ['–°–¥–µ–ª–∞–ª']
    key_regist.add(*buttons)
    if message.text.lower() == '–Ω–µ—Ç':
        await message.answer("–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ telegram. "
                             "–ó–∞–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –∏ —Å–º–µ–Ω–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, "
                             "–ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é."
                             "\n\n–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω—É–∂–Ω–æ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–≤—è–∑–∏ —Å –≤–∞–º–∏, "
                             "–µ—Å–ª–∏ –∫ –≤–∞–º –æ–±—Ä–∞—Ç—è—Ç—Å—è –∑–∞ –ø–æ–º–æ—â—å—é –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É.",
                             reply_markup=key_regist)
        return
    if message.from_user.username is None:

        await message.answer(f"–°–¥–µ–ª–∞–π—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –Ω–∞–ø–∏—à–∏—Ç–µ '—Å–¥–µ–ª–∞–ª'."
                             f"\n–û–Ω–æ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–≤—è–∑–∏ —Å –≤–∞–º–∏, "
                             f"–µ—Å–ª–∏ –∫ –≤–∞–º –æ–±—Ä–∞—Ç—è—Ç—Å—è –∑–∞ –ø–æ–º–æ—â—å—é –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É.",
                             reply_markup=key_regist)
    else:
        keyboard_with_all_subjects = await Markup.keyboard_with_all_subjects_with_see(config.all_subjects[1:])
        keyb = types.ReplyKeyboardRemove()
        await message.answer(f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{message.from_user.username}", reply_markup=keyb)
        await state.update_data(username='@' + message.from_user.username)
        await regist_decider.next()
        await state.update_data(subjects=[])
        await message.answer('–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã. \n'
                             '–í—ã–±–∏—Ä–∞–π—Ç–µ —Å —É–º–æ–º, —Ç.–∫. –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø—Ä–µ–¥–º–µ—Ç–∞–º –≤–∞–º –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'
                             '–¢–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É –ø—Ä–µ–¥–º–µ—Ç–æ–≤üëá',
                             reply_markup=keyboard_with_all_subjects)


@dp.callback_query_handler(text_contains='give_all_subjects', state=regist_decider.waiting_regist_subjects)
async def give_subjects_info(call: types.CallbackQuery, state: FSMContext):
    data_call = call.data.split(':')[-1]
    if data_call == 'see':
        keyboard_hide = await Markup.keyboard_with_all_subjects_with_hide(config.all_subjects[1:])
        mess = config.info_subs_mess
        await call.message.edit_text(mess, reply_markup=keyboard_hide)
    elif data_call == 'hide':
        keyboard_see = await Markup.keyboard_with_all_subjects_with_see(config.all_subjects[1:])
        mess = '–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã. \n' \
               '–¢–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É –ø—Ä–µ–¥–º–µ—Ç–æ–≤üëá'
        await call.message.edit_text(mess, reply_markup=keyboard_see)
    elif data_call == 'stop':
        user_data = await state.get_data()
        if len(user_data.get('subjects')) == 0:
            await call.answer(f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç')
        else:
            key_regist = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            buttons = ['–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', '–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ', '–û—Ç–º–µ–Ω–∏—Ç—å']
            key_regist.add(*buttons)
            await bot.send_message(call.from_user.id,
                                   f"- –£–Ω–∏–≤–µ—Ä\n{user_data.get('univer')} \n"
                                   f"- –ü—Ä–µ–¥–º–µ—Ç—ã\n{', '.join(set(user_data.get('subjects')))} \n"
                                   f"- –ù–∏–∫–Ω–µ–π–º\n{user_data.get('username')} \n",
                                   reply_markup=key_regist)
            await state.update_data(subjects=set(user_data.get('subjects')))
            await regist_decider.next()
    else:
        await call.answer(f'{data_call} –¥–æ–±–∞–≤–ª–µ–Ω')
        user_data = await state.get_data()
        subs = user_data.get('subjects')
        subs.append(data_call)
        await state.update_data(subjects=subs)


# @dp.message_handler(state=regist_decider.waiting_regist_subjects, content_types=types.ContentTypes.TEXT)
# async def regist_subjects(message: types.Message, state: FSMContext):
#     all_subjects = config.all_subjects[1:]
#     subs = message.text.lower().replace(' ', '').split(',')
#     for i in subs:
#         if i not in all_subjects:
#             await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫–∏')
#             return

@logger.catch()
@dp.message_handler(state=regist_decider.waiting_end_regist, content_types=types.ContentTypes.TEXT)
async def stop_regist(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    keyb = types.ReplyKeyboardRemove()
    if message.text.lower() == '–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å':
        # –¥–æ–±–∞–ª–≤–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
        profile_id = DB.get_profile_id(user_id)
        if bool(profile_id):
            res = profile_id
            were_decider = True
        else:
            res = await bot.send_message(config.profile_id, '–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è')
            res = res.message_id
            were_decider = False
        user_data = await state.get_data()
        dt = datetime.datetime.now(tz=config.tz)
        dict_values = {'decider': True,
                       'pay_date': dt,
                       'username': user_data.get('username'),
                       'end_pay_date': await give_date_subscription(dt, config.prob_pereod),
                       'univer': user_data.get('univer'),
                       'subject_count': len(user_data.get('subjects')),
                       'profile_id': int(res)}
        DB.update_in_user(user_id, dict_values)
        sub = user_data.get('subjects')
        if were_decider:
            DB.delete_user(user_id=user_id, sub=True)
        DB.new_row_subject_db(user_id, *sub)
        text = await give_profile_desider_text(user_id=user_id, chanel=True)
        await bot.edit_message_text(text, chat_id=config.profile_id, message_id=res)
        await bot.send_message(message.chat.id,
                               text='–û—Ç–ª–∏—á–Ω–æ! –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω. '
                                    '–¢–µ–ø–µ—Ä—å –≤—ã –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ –†–µ—à–∞–ª–∞! '
                                    '–ö–æ–≥–¥–∞ –∫–æ–º—É-—Ç–æ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –ø–æ–º–æ—â—å '
                                    '–ø–æ –≤–∞—à–∏–º –ø—Ä–µ–¥–º–µ—Ç–∞–º, –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–æ–æ–±—â–∏–º –æ–± —ç—Ç–æ–º.',
                               reply_markup=keyb)
        await message.answer('–ê —ç—Ç–æ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –≤ –∫–∞–Ω–∞–ª–µ —Ä–µ—à–∞–ª. '
                             '–ö–æ–≥–¥–∞ –≤—ã –±—É–¥–µ—Ç–µ –æ—Ç–∫–ª–∏–∫–∞—Ç—å—Å—è –Ω–∞ –∑–∞–¥–∞–Ω–∏—è, '
                             '–±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–∫–∞–∑—á–∏–∫—É –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–≤—è–∑–∏ —Å –≤–∞–º–∏. '
                             '–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Å–¥–µ–ª–∫–∏, –∑–∞–∫–∞–∑—á–∏–∫ –º–æ–∂–µ—Ç –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∏—Ä–∏–π –∏ —Ä–µ–∞–∫—Ü–∏—é –ø–æ–¥ –≤–∞—à–∏–º –ø—Ä–æ—Ñ–∏–ª–µ–º.')
        await bot.forward_message(chat_id=message.from_user.id,
                                  from_chat_id=config.profile_id,
                                  message_id=res, )
        await state.finish()
    elif message.text.lower() == '–Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ':
        await bot.send_message(message.chat.id,
                               text='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞—á–∞–ª–∞—Å—å –∑–∞–Ω–æ–≤–æ.\n'
                                    '–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç(—Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ)',
                               reply_markup=keyb)
        await regist_decider.waiting_regist_univer.set()
    elif message.text.lower() == '–æ—Ç–º–µ–Ω–∏—Ç—å':
        await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=keyb)
        await state.reset_state(with_data=False)
        await state.finish()
    else:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤')
        await regist_decider.waiting_regist_univer.set()


# ---------------------------------------------------- admins  ----------------------------------------------------
@dp.message_handler(commands=['chat_info'])  # main admin
async def chat_info(message: types.Message):
    if await main_admin_test(message):
        await bot.send_message(message.chat.id, message.chat.id)


@dp.message_handler(commands=['dump'])  # main admin
async def dump(message: types.Message):
    if await main_admin_test(message):
        await make_dump()


@logger.catch()
@dp.message_handler(commands=['restart_data'])  # main admin
async def restart_data(message: types.Message):
    if await main_admin_test(message):
        DB.ban_users_list = DB.ban_list
        try:
            DB.close()
            DB.connect()
            await bot.send_message(config.admin_id, '–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
        except:
            await bot.send_message(config.admin_id, '–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏')


@dp.message_handler(commands=['answer_user'])  # admins
async def answer_user(message: types.Message):
    if await admins_test(message):
        text = message.text.split()
        id_user = text[1]
        await bot.send_message(id_user, '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–æ–≤: ' + ' '.join(text[2:]))


@logger.catch()
@dp.message_handler(commands=['ban_user'])  # admins
async def ban_user_command(message: types.Message):
    if await admins_test(message):
        text = message.text.split()
        id_user = text[1]
        key = await Markup.ban_user(id_user)
        await bot.send_message(config.SUPPORT_ID, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {id_user}', reply_markup=key)


class send_public(StatesGroup):
    choice_users = State()
    send_publication = State()
    confirm_publication = State()


@dp.message_handler(commands=['public'])
async def public(message: types.Message):
    if await admins_test(message):
        keyb = Markup.keyboard_public()
        await message.answer('–ö–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å?', reply_markup=keyb)
        await send_public.choice_users.set()


@dp.callback_query_handler(text_contains='choice_public', state=send_public.choice_users)
async def keyboard_choice_public(call: types.CallbackQuery, state: FSMContext):
    data_call = call.data.split(':')[-1]
    await call.message.edit_text(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {data_call}', reply_markup=None)
    await state.update_data(choice_users=data_call)
    await bot.send_message(call.from_user.id, '–û—Ç–ø—Ä–∞–≤—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é')
    await send_public.send_publication.set()


@dp.message_handler(state=send_public.send_publication, content_types=['text', 'photo', 'document'])
async def give_task(message: types.Message, state: FSMContext):
    await state.update_data(task_message=message)
    await message.reply('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É', reply_markup=Markup.confirm_public)
    await send_public.confirm_publication.set()


@dp.callback_query_handler(text_contains='confirm_public_from_user', state=send_public.confirm_publication)
async def keyboard_subjects_task(call: types.CallbackQuery, state: FSMContext):
    data_call = call.data.split(':')[-1]
    task_data = await state.get_data()
    if data_call == 'yes':
        await call.message.edit_text('–û—Ç–ø—Ä–∞–≤–∫–∞', reply_markup=None)
        send_list_id = 0
        if task_data['choice_users'] == 'all':
            send_list_id = DB.all_list()
        elif task_data['choice_users'] == 'desider':
            deciders_list = (DB.cursor.execute('SELECT telegram_id FROM user WHERE decider = True')).fetchall()
            send_list_id = [x[0] for x in deciders_list]
        elif task_data['choice_users'] == 'dunno':
            dunnos_list = (DB.cursor.execute('SELECT telegram_id FROM user WHERE dunno = True AND decider = False')).fetchall()
            send_list_id = [x[0] for x in dunnos_list]
        # from tqdm.contrib.telegram import tqdm
        # for i in tqdm(send_list_id, token=config.token, chat_id=call.from_user.id):
        for i in send_list_id:
            try:
                await task_data['task_message'].send_copy(chat_id=i)
                await asyncio.sleep(0.1)
            except:
                pass
        await bot.send_message(call.from_user.id, '–°–æ–æ–±—â–µ–Ω–∏—è —Ä–∞–∑–æ—Å–ª–∞–Ω—ã')
        await state.finish()
    elif data_call == 'no':
        await call.message.edit_text('–û—Ç–ø—Ä–∞–≤—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é', reply_markup=None)
        await send_public.send_publication.set()
    elif data_call == 'stop':
        await call.message.edit_text('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏', reply_markup=None)
        await state.finish()


@dp.message_handler(commands=['statistics'])  # admins
async def statistics(message: types.Message):
    if await admins_test(message):
        await send_statistic()


@dp.message_handler(commands=['keyboard_stop'])  # main admin
async def keyboard_stop(message: types.Message):
    if await main_admin_test(message):
        keyb = types.ReplyKeyboardRemove()
        await bot.send_message(message.chat.id, text='–í—ã–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã', reply_markup=keyb)


@dp.message_handler(commands=['testing'])  # main admin
async def testing(message: types.Message):
    if await main_admin_test(message):
        # await message.answer(f'[+]')
        # mem = memory_usage(-1, include_children=True, multiprocess=True)
        # mess = f'{mem} \n\n' \
        #        f'all = {np.sum(mem)}'
        # await message.answer(mess)
        for i in trange(1000000, token=config.token, chat_id=message.from_user.id):
            print(i)


        # all_list = DB.all_list()
        # for i in all_list:
        #     DB.cursor.execute('DELETE FROM user WHERE telegram_id = ?', (i, ))
        #     DB.cursor.execute('DELETE FROM subject WHERE telegram_id = ?', (i, ))
        # DB.conn.commit()
        # await bot.send_message(config.admin_id, '–ë–∞–∑–∞ –æ—á–∏—â–µ–Ω–∞')

        # await clear_to_do()
        # while True:
        #     await asyncio.sleep(5)
        #     await message.answer(f'{message.from_user.username} –ø—Ä–æ—à–ª–æ –Ω–µ –º–µ–Ω—å—à–µ 5 —Å–µ–∫—É–Ω–¥')


@logger.catch()
@dp.message_handler(commands=['delete_user'])  # admins
async def delete_user_command(message: types.Message):
    if await admins_test(message):
        text = message.text.split()
        id_user = int(text[1])
        profile_id = DB.get_profile_id(id_user)
        await bot.edit_message_text('–ü—Ä–æ—Ñ–∏–ª—å —É–¥–∞–ª–µ–Ω', chat_id=config.profile_id, message_id=profile_id)
        DB.delete_user(user_id=id_user, user=True)
        if DB.decider_exists(message.from_user.id):
            DB.delete_user(user_id=id_user, sub=True)
        await bot.send_message(config.SUPPORT_ID, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {id_user} —É–¥–∞–ª–µ–Ω')


# ---------------------------------------------------- RUN ----------------------------------------------------

if __name__ == '__main__':
    executor.start_polling(dp, on_startup=start_bot, on_shutdown=stop_bot, skip_updates=False)
